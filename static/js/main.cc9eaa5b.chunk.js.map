{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","skyline","clickedSkylineIds","score","goal","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score_Score","components_Wrapper_Wrapper","map","skylines","components_Card_Card","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cc9eaa5b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n  <div className=\"card img-container img-thumbnail hover\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport skyline from \"./skyline.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.skyline to the cards json array\n  state = {\n    skyline,\n    clickedSkylineIds: [],\n    score: 0,\n    goal: 12,\n    status: \"\" \n  };\n\n  //shuffle the skyline cards in the browser when clicked\n  shuffleScoreCard = id => {\n    let clickedSkylineIds = this.state.clickedSkylineIds; //This array holds all the id's of the cards that have been clicked\n\n    if(clickedSkylineIds.includes(id)){\n      this.setState({ clickedSkylineIds: [], score: 0, status:  \"Sorry Game Over! Click a picture to play again!\" });\n      return;\n    }else{\n      clickedSkylineIds.push(id) //Adds clicked card id to array\n\n      if(clickedSkylineIds.length === 12){\n        this.setState({score: 12, status: \"You Won! Click a picture to play again!\", clickedSkylineIds: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ skyline, clickedSkylineIds, score: clickedSkylineIds.length, status: \" \" });\n\n      for (let i = skyline.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [skyline[i], skyline[j]] = [skyline[j], skyline[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Clicky-Game!</h1>\n          <p className=\"App-intro\">\n          Click on an image to earn points, but don't click on any more than once!\n          </p>\n        </header>\n        <Score total={this.state.score}\n               goal={12}\n               status={this.state.status}\n               />\n        <Wrapper>\n          {this.state.skyline.map(skylines => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={skylines.id}\n              key={skylines.id}\n              image={skylines.image}\n            />\n          ))}\n        </Wrapper>\n        <footer>\n          \n        </footer>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();"],"sourceRoot":""}